#!/bin/bash
#set -x
# Build tar containing source files for the arduino version of the library
# $1 -> output tar name
# Author Davide Ciminaghi Oct 2016

ARDUINO_DIR=${BASE}/arduino
ARDUINO_FILES=${ARDUINO_DIR}/files
ZIPDIR=$(mktemp -d)/dfu
SRCDIR=${ZIPDIR}/src
PROPERTIES_FILE=$ARDUINO_DIR/properties
BINARY_FORMATS_TABLE=$SRCDIR/binary-formats-table.c

# Generate file header
# $1 -> file output path
gen_file_header() {
    cat <<EOF > $1
/* Automatically generated by $0 on $(date) */

#include "dfu.h"
#include "dfu-internal.h"

EOF
}

add_binary_formats()
{
    local p

    for p in $1 ; do
	n=$(echo $p | cut -d ',' -f 1)
	eval $2
	probe=$(echo $p | cut -d ',' -f 2)
	decode=$(echo $p | cut -d ',' -f 3)
	fini=$(echo $p | cut -d ',' -f 4)
	echo -e "\t{" >> $BINARY_FORMATS_TABLE
	echo -e "\t\t$probe,$decode,$fini" >> $BINARY_FORMATS_TABLE
	echo -e "\t}," >> $BINARY_FORMATS_TABLE
    done

}

gen_binary_formats_file() {
    gen_file_header $BINARY_FORMATS_TABLE
    r=$(find ${BASE}/src/ -name \*.c | xargs grep declare_dfu_format | \
	       sed -e 's/.*(\([^)]*\))/\1/g' | tr -d '\n')

    IFS=';'
    # Declare prototypes
    for p in $r ; do
	n=$(echo $p | cut -d ',' -f 1)
	probe=$(echo $p | cut -d ',' -f 2)
	decode=$(echo $p | cut -d ',' -f 3)
	fini=$(echo $p | cut -d ',' -f 4)
	echo -e \
	     "extern int ${n}_probe(struct dfu_binary_file *);\n\t
extern int ${n}_decode_chunk(struct dfu_binary_file *bf, \
phys_addr_t *out_buf);\n\t \
extern int ${n}_fini(struct dfu_binary_file *bf);\n\t" \
	     >> $BINARY_FORMATS_TABLE
    done

    # Setup actual table
    echo "const struct dfu_format_ops registered_formats_start[] = {" \
	 >> $BINARY_FORMATS_TABLE

    # Add all binary formats but raw binary
    add_binary_formats "$r" "[ \"\$n\" = \"binary\" ] && continue"
    # Let raw binary last
    add_binary_formats "$r" "[ \"\$n\" = \"binary\" ] || continue"

    echo -e "\t{ NULL, NULL, }, " >> $BINARY_FORMATS_TABLE

    echo "};" >> $BINARY_FORMATS_TABLE

    echo "/* Dummy symbol registered_formats_end */" >> $BINARY_FORMATS_TABLE
    echo "const struct dfu_format_ops registered_formats_end[] = { NULL, NULL, };" \
	 >> $BINARY_FORMATS_TABLE
}

[ $# -ge 1 ] ||  { echo "Use $0 <output_tar_path>" ; exit 127 ; }

[ -n "$BASE" ] || \
    { echo "Please define the BASE environment variable pointing to libdfu main src dir" ; exit 127 ; }

[ -n "$(git diff)" ] && { echo "WARNING DIRTY SOURCE" ; sleep 5 ; }

mkdir -p ${SRCDIR}

exec 9<${ARDUINO_FILES}

# Copy source files
while read -r -u 9 line; do
    # Remove comments
    echo $line | grep -q "^#.*" && continue
    # Remove empty lines
    [ -z "$line" ] && continue
    [ -n "$(ls $BASE/$line)" ] || { echo "$BASE/$line not found" ; exit 127 ; }
    for f in $(ls $BASE/$line) ; do
	cp -a $f $SRCDIR
    done
done

# Copy license and README
cp -a $BASE/COPYING $BASE/README $ZIPDIR

# Add library.properties file
version=$(git tag | tail -n 1 | sed -e 's/v//')
cat $PROPERTIES_FILE | sed -e "s/version=AUTO/version=$version/" > \
			   $ZIPDIR/library.properties

# Add file with binary formats table
gen_binary_formats_file

# Finally generate zip under $BASE
echo -n "BUILDING ZIP FILE $1 ... "
cd $ZIPDIR/../ && zip -q -r -9 $1 . && echo OK || { echo ERROR ; exit 127 ; }

rm -fr $ZIPDIR
